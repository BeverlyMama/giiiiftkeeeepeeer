import logging
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8481984389:AAHX9_fXrgemHmPeHNuX7pd2xJ1ooDkYgp4"
IMAGE_URL = "https://imgur.com/a/A8aIr3k"  # –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftKeeperOTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç\n\n"
    "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!\n"
    "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\n"
    "üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏\n"
    "üîπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
)

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    ton_wallet TEXT,
    bank_card TEXT
)
""")
conn.commit()

# === –ö–ù–û–ü–ö–ò ===
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏", callback_data="manage_requisites")],
    [InlineKeyboardButton(text="üìÑ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
    [InlineKeyboardButton(text="üß∑ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link")],
    [InlineKeyboardButton(text="üìû –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
])

manage_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üåë –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å TON-–∫–æ—à–µ–ª–µ–∫", callback_data="edit_ton")],
    [InlineKeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="edit_card")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
])

back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
])

# === –ë–û–¢ ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
dp.workflow_data = {}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# === –ö–û–ú–ê–ù–î–ê /start ===
@dp.message(F.text == "/start")
async def start_cmd(message: types.Message):
    await message.answer_photo(
        photo=IMAGE_URL,
        caption=WELCOME_TEXT,
        reply_markup=main_keyboard
    )

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ö–í–ò–ó–ò–¢–ê–ú–ò ===
@dp.callback_query(F.data == "manage_requisites")
async def manage_requisites(callback: types.CallbackQuery):
    text = (
        "üì• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n"
        "üëá"
    )
    await callback.message.edit_caption(caption=text, reply_markup=manage_keyboard)

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï TON-–ö–û–®–ï–õ–¨–ö–ê ===
@dp.callback_query(F.data == "edit_ton")
async def edit_ton(callback: types.CallbackQuery):
    cursor.execute("SELECT ton_wallet FROM users WHERE user_id = ?", (callback.from_user.id,))
    result = cursor.fetchone()
    current_wallet = result[0] if result and result[0] else "–Ω–µ –∑–∞–¥–∞–Ω"
    text = (
        f"üíº –í–∞—à —Ç–µ–∫—É—â–∏–π TON-–∫–æ—à–µ–ª–µ–∫: {current_wallet}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    )
    await callback.message.edit_caption(caption=text, reply_markup=back_keyboard)
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π TON-–∫–æ—à–µ–ª–µ–∫:")
    dp.workflow_data[str(callback.from_user.id)] = "waiting_ton"

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–†–¢–´ ===
@dp.callback_query(F.data == "edit_card")
async def edit_card(callback: types.CallbackQuery):
    cursor.execute("SELECT bank_card FROM users WHERE user_id = ?", (callback.from_user.id,))
    result = cursor.fetchone()
    current_card = result[0] if result and result[0] else "–Ω–µ –∑–∞–¥–∞–Ω–∞"
    text = (
        f"üí≥ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞: {current_card}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    )
    await callback.message.edit_caption(caption=text, reply_markup=back_keyboard)
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:")
    dp.workflow_data[str(callback.from_user.id)] = "waiting_card"

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –î–ê–ù–ù–´–• ===
@dp.message()
async def handle_user_input(message: types.Message):
    state = dp.workflow_data.get(str(message.from_user.id))
    if state == "waiting_ton":
        cursor.execute("""
            INSERT INTO users (user_id, ton_wallet)
            VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET ton_wallet=excluded.ton_wallet
        """, (message.from_user.id, message.text))
        conn.commit()
        await message.answer("‚úÖ TON-–∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_keyboard)
        dp.workflow_data[str(message.from_user.id)] = None
    elif state == "waiting_card":
        cursor.execute("""
            INSERT INTO users (user_id, bank_card)
            VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET bank_card=excluded.bank_card
        """, (message.from_user.id, message.text))
        conn.commit()
        await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_keyboard)
        dp.workflow_data[str(message.from_user.id)] = None

# === –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ ===
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_caption(caption=WELCOME_TEXT, reply_markup=main_keyboard)

# === –°–¢–ê–†–¢ ===
async def main():
    await dp.start_polling(bot)

if name == "__main__":
    asyncio.run(main())

